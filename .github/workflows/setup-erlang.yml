name: Setup Erlang

on:
  push:
    branches:
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        libc: [glibc, musl]
        exclude:
          - arch: arm64
            libc: musl
    container: ${{ matrix.libc == 'musl' && 'alpine:3' || 'debian:12' }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./
    # On Alpine, we need to install the dependencies for the Erlang runtime
    # as they are not included in the base image.
    - run: apk update && apk add --no-cache libstdc++ libgcc ncurses-libs
      if: matrix.libc == 'musl'

    # We also need to install the dependencies of rebar3 (compilers, curl and
    # git).
    - run: apt-get update && apt-get install -y autoconf gcc g++ make git curl
      if: matrix.libc == 'glibc'
    - run: apk add --no-cache autoconf gcc g++ make git curl
      if: matrix.libc == 'musl'
    - run: cd dummy-release && ./rebar3 as prod release
    - run: cd dummy-escript && ./rebar3 escriptize

  build-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [25, 26, 27]
    steps:
    - uses: actions/checkout@v4
    - uses: ./
      with:
        erlang-version: ${{ matrix.version }}
    - run: cd dummy-release && ./rebar3 as prod release
    - run: cd dummy-escript && ./rebar3 escriptize
    - run: |
        mv dummy-release/_build/prod/rel/hello_world server
        mkdir client
        mv dummy-escript/_build/default/* client
        tar -czf ubuntu-applications.tar.gz client server
    - uses: actions/upload-artifact@v4
      with:
        name: erlang-${{ matrix.version }}-ubuntu-applications
        path: ubuntu-applications.tar.gz

  test-ubuntu:
    runs-on: ubuntu-latest
    needs: build-ubuntu
    strategy:
      matrix:
        version: [25, 26, 27]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: erlang-${{ matrix.version }}-ubuntu-applications
    - run: |
        tar -xzf ubuntu-applications.tar.gz
        ./server/bin/hello_world daemon
        sleep 1
        ./server/bin/hello_world ping | grep -q "pong" || exit 1
    - uses: ./
      with:
        erlang-version: ${{ matrix.version }}
    - run: |
        ./client/bin/hello_world world | grep -q "Hello world!" || exit 1

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        version: [25, 26, 27]
    steps:
    - uses: actions/checkout@v4
    - uses: ./
      with:
        erlang-version: ${{ matrix.version }}
    - run: cd dummy-release && ./rebar3 as prod release
    - run: cd dummy-escript && ./rebar3 escriptize
    - run: |
        mv dummy-release/_build/prod/rel/hello_world server
        mkdir client
        mv dummy-escript/_build/default/* client
        tar -czf macos-applications.tar.gz client server
    - uses: actions/upload-artifact@v4
      with:
        name: erlang-${{ matrix.version }}-macos-applications
        path: macos-applications.tar.gz

  test-macos:
    runs-on: macos-latest
    needs: build-macos
    strategy:
      matrix:
        version: [25, 26, 27]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: erlang-${{ matrix.version }}-macos-applications
    - run: |
        tar -xzf macos-applications.tar.gz
        ./server/bin/hello_world daemon
        sleep 1
        ./server/bin/hello_world ping | grep -q "pong" || exit 1
    - uses: ./
      with:
        erlang-version: ${{ matrix.version }}
    - run: |
        ./client/bin/hello_world world | grep -q "Hello world!" || exit 1

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        version: [25, 26, 27]
    steps:
    - uses: actions/checkout@v4
    - uses: ./
      with:
        erlang-version: ${{ matrix.version }}
    - run: cd dummy-release && ./rebar3 as prod release
    - run: cd dummy-escript && ./rebar3 escriptize

# XXX: This needs to be implemented. On Windows, it requires admin level to
#      start the Erlang application.

    # - run: |
    #     mv dummy-release/_build/prod/rel/hello_world server
    #     mkdir client
    #     mv dummy-escript/_build/default/* client
    #     tar -czf windows-applications.tar.gz client server
    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: erlang-${{ matrix.version }}-windows-applications
    #     path: windows-applications.tar.gz

  # test-windows:
  #   runs-on: windows-latest
  #   needs: build-windows
  #   strategy:
  #     matrix:
  #       version: [25]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: erlang-${{ matrix.version }}-windows-applications
  #   - run: |
  #       tar -xzf windows-applications.tar.gz
  #       ./server/bin/hello_world start
  #       sleep 1
  #       ./server/bin/hello_world ping | grep -q "pong" || exit 1
  #   - uses: ./
  #     with:
  #       erlang-version: ${{ matrix.version }}
  #   - run: |
  #       ./client/bin/hello_world world | grep -q "Hello world!" || exit 1

  test-rebar3:
    strategy:
      matrix:
        platform: [ubuntu, macos, windows]
    runs-on: ${{ matrix.platform }}-latest
    steps:
    - uses: actions/checkout@v4
    # We remove the provided rebar3 scripts so we can test if the action
    # actually install rebar3.
    - run: |
        rm dummy-release/rebar3*
        rm dummy-escript/rebar3*
    - uses: ./
      with:
        install-rebar3: true
    - run: cd dummy-release && rebar3 as prod release
    - run: cd dummy-escript && rebar3 escriptize

  test-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./
      id: setup-erlang
      with:
        erlang-version: 27
    # Check if the installed version of Erlang is correct.
    - run: |
        if [ "${{ steps.setup-erlang.outputs.erlang-version }}" != "27.3.4" ]; then
          echo "Unexpected Erlang/OTP version: ${{ steps.setup-erlang.outputs.erlang-version }}"
          exit 1
        fi
        echo "Erlang/OTP version: ${{ steps.setup-erlang.outputs.erlang-version }} was installed."
